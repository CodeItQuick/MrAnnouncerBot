using DndCore;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace DndTests
{
	[TestClass]
	public class VulnerabilityTests
	{
		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		[TestMethod]
		public void TestDeafnessImmunity()
		{
			Monster vrock = MonsterBuilder.BuildVrock();
			Character wizard = CharacterBuilder.BuildTestWizard();
			Attack stunningScreech = vrock.attacks.Find(x => x.Name == "Stunning Screech");
			Assert.IsTrue(wizard.CanBeAffectedBy(stunningScreech));
			wizard.activeConditions |= Conditions.deafened;
			Assert.IsFalse(wizard.CanBeAffectedBy(stunningScreech));
		}

		[TestMethod]
		public void TestStunnedImmunity()
		{
			Monster vrock = MonsterBuilder.BuildVrock();
			Character wizard = CharacterBuilder.BuildTestWizard();
			Attack stunningScreech = vrock.attacks.Find(x => x.Name == "Stunning Screech");
			Assert.IsTrue(wizard.CanBeAffectedBy(stunningScreech));
			wizard.conditionImmunities = Conditions.stunned;
			Assert.IsFalse(wizard.CanBeAffectedBy(stunningScreech));
		}

		[TestMethod]
		public void TestDamageImmunity()
		{
			Monster vrock = MonsterBuilder.BuildVrock();
			Character wizard = CharacterBuilder.BuildTestWizard();
			Attack beak = vrock.attacks.Find(x => x.Name == "Beak");
			Assert.IsTrue(wizard.CanBeAffectedBy(beak));
			wizard.AddDamageImmunity(DamageType.Piercing, AttackKind.Any);
			Assert.IsFalse(wizard.CanBeAffectedBy(beak));
		}
	}
}
